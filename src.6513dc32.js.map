{"version":3,"sources":["index.js"],"names":["CountdownTimer","constructor","selector","targetDate","refs","days","document","querySelector","hours","mins","secs","setInterval","Date","now","currentTime","deltaTime","getTimeComponents","updateClockface","time","pad","Math","floor","value","String","padStart","textContent"],"mappings":";;;AAyGA,aAzGA,QAAA,oBAEE,MAAMA,EACJC,aAAY,SAAEC,EAAF,WAAYC,IACfD,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EACbC,KAAAA,KAAO,CACRC,KAAMC,SAASC,cAAc,uBAC7BC,MAAOF,SAASC,cAAc,wBAC9BE,KAAMH,SAASC,cAAc,uBAC7BG,KAAMJ,SAASC,cAAc,wBAGjCI,YAAY,KACYC,KAAKC,MAAnBC,MACAC,EAAY,KAAKZ,WAAaS,KAAKC,OAEnC,KAAER,EAAF,MAAQG,EAAR,KAAeC,EAAf,KAAqBC,GAAS,KAAKM,kBAAkBD,GACtDE,KAAAA,gBAAgB,CAAEZ,KAAAA,EAAMG,MAAAA,EAAOC,KAAAA,EAAMC,KAAAA,KAE3C,KAGPM,kBAAkBE,GAMX,MAAA,CAAEb,KALK,KAAKc,IAAIC,KAAKC,MAAMH,EAAQ,QAK3BV,MAJD,KAAKW,IAAIC,KAAKC,MAAOH,EAAQ,MAAyB,OAI9CT,KAHR,KAAKU,IAAIC,KAAKC,MAAOH,EAAQ,KAAoB,MAGnCR,KAFd,KAAKS,IAAIC,KAAKC,MAAOH,EAAQ,IAAc,OAKzDC,IAAIG,GACGC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAGjCP,iBAAgB,KAAEZ,EAAF,MAAQG,EAAR,KAAeC,EAAf,KAAqBC,IAChCN,KAAAA,KAAKC,KAAKoB,eAAiBpB,IAC3BD,KAAAA,KAAKI,MAAMiB,eAAiBjB,IAC5BJ,KAAAA,KAAKK,KAAKgB,eAAiBhB,IAC3BL,KAAAA,KAAKM,KAAKe,eAAiBf,KAKpC,IAAIV,EAAe,CACfE,SAAU,WACVC,WAAY,IAAIS,KAAK","file":"src.6513dc32.js","sourceRoot":"../src","sourcesContent":["import './sass/main.scss';\n\n  class CountdownTimer {\n    constructor({ selector, targetDate}) {        \n        this.selector = selector;\n        this.targetDate = targetDate;\n        this.refs = {\n            days: document.querySelector('[data-value=\"days\"]'),\n            hours: document.querySelector('[data-value=\"hours\"]'),\n            mins: document.querySelector('[data-value=\"mins\"]'),\n            secs: document.querySelector('[data-value=\"secs\"]'),\n        };\n\n        setInterval(() => {\n            const currentTime = Date.now();\n            const deltaTime = this.targetDate - Date.now();\n            \n            const { days, hours, mins, secs } = this.getTimeComponents(deltaTime);\n            this.updateClockface({ days, hours, mins, secs });\n                \n        }, 1000);\n    }\n\n    getTimeComponents(time) {\n    const days =  this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins =  this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs =  this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { days, hours, mins, secs };\n    }\n\n    pad(value) {\n    return String(value).padStart(2, '0');\n    }\n\n    updateClockface({ days, hours, mins, secs }) {\n    this.refs.days.textContent = `${days}`;\n    this.refs.hours.textContent = `${hours}`;\n    this.refs.mins.textContent = `${mins}`;\n    this.refs.secs.textContent = `${secs}`; \n}\n};\n\n\nnew CountdownTimer({\n    selector: '#timer-1',\n    targetDate: new Date('Jul 15, 2022'),    \n});\n\n\n// const refs = {\n//   days: document.querySelector('[data-value=\"days\"]'),\n//   hours: document.querySelector('[data-value=\"hours\"]'),\n//   mins: document.querySelector('[data-value=\"mins\"]'),\n//   secs: document.querySelector('[data-value=\"secs\"]'),\n// }\n\n// class CountdownTimer {\n//   constructor({ selector, targetDate }) {\n//     this.selector = selector;\n//     this.targetDate = targetDate;\n//     this.timerId = null;\n//   }\n\n//   start() {\n//         const startTime = Date.now();\n\n//         this.intervalId = setInterval(() => {\n//           const currentTime = Date.now();\n//           const deltaTime = this.targetDate - Date.now();\n//           const time = this.getTimeComponents(deltaTime);\n//         },1000);\n//   }\n//   getTimeComponents(time) {\n//     const days = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n//     const hours = pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n//     const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n//     const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n  \n//     return {days, hours, mins, secs};\n//   }\n\n//   pad(value) {\n//     return String(value).padStart(2, '0');\n//   }\n// }\n\n//   const timer = new CountdownTimer({\n//     selector: '#timer-1',\n//     targetDate: new Date('Jul 17, 2019'),\n//   });\n\n  \n//   function updateClockFace({days, hours, mins, secs}) {\n//     refs.days.textContent = `${days}`;\n//     refs.hours.textContent = `${hours}`;\n//     refs.mins.textContent = `${mins}`;\n//     refs.secs.textContent = `${secs}`;\n//   }\n\n//   function countdownTimer() {\n//     if (deltaTime  <= 0) {\n//       clearInterval(timerId);\n//     }\n//   }"]}